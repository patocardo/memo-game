"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type MemoTest {
    id: ID!
    name: String!
    images: [String!]!
    created_at: DateTime!
    updated_at: DateTime!
}

type Image {
    id: ID!
    url: String!
}

type Query {
    memoTests: [MemoTest!]! @field(resolver: "App\\GraphQL\\Queries\\MemoTests")
    memoTest(id: ID!): MemoTest @field(resolver: "App\\GraphQL\\Queries\\MemoTests")
}

type Mutation {
    createMemoTest(name: String!, images: [String!]!): MemoTest! @field(resolver: "App\\GraphQL\\Mutations\\MemoTestMutator@create")
    updateMemoTest(id: ID!, name: String, images: [String!]): MemoTest! @field(resolver: "App\\GraphQL\\Mutations\\MemoTestMutator@update")
    deleteMemoTest(id: ID!): DeleteResponse! @field(resolver: "App\\GraphQL\\Mutations\\MemoTestMutator@delete")
}

type DeleteResponse {
    success: Boolean!
    message: String
}
